
simulation.cycles CYCLES 
network.size SIZE
random.seed 1234567890
network.node.appgroup_protocol group
network.node.universe_protocol universe

CYCLES 4
SIZE 10
CYCLELENGTH 500
CRASH 0.2

#####################################Protocol#################################

protocol.geolocation it.polimi.peersim.protocols.GeoLocation

protocol.link IdleProtocol

protocol.discovery it.polimi.peersim.protocols.DiscoveryProtocol
{
	geolocation_protocol geolocation
	discovery_radius 3.5
	#the larger more neighbors
	universe_protocol universe
	grouping_protocol group
}

protocol.universe it.polimi.peersim.protocols.UniverseProtocol
{
	universe_protocol universe
	discovery_protocol discovery
	follower_threshold 3
	follower_thresholdrate 2
}

protocol.routing it.polimi.peersim.protocols.RoutingProtocol


protocol.app it.polimi.peersim.protocols.AppProtocol
{
grouping_protocol group
}

protocol.group it.polimi.peersim.protocols.GroupingProtocol
{
	universe_protocol universe
	routing_protocol routing
	grouping_protocol group
}

##########################################Initializer###########################



#init.geoinit it.polimi.peersim.initializers.GeoInitializer
#{
#	geolocation_protocol geolocation
#	plot_protocol geolocation
#}

#init.universeinit it.polimi.peersim.initializers.UniverseInitializer
#{
#	universe_protocol universe 
#	discovery_protocol discovery
#}

init.protocolinit it.polimi.peersim.initializers.ProtocolStackInitializer
{
universe_protocol universe 
discovery_protocol discovery
grouping_protocol group
geolocation_protocol geolocation
}


############################################Control############################

control.crash DynamicNetwork
{
  RandNI
  add -CRASH*SIZE
  #We keep a minimum number of nodes for our network
  #minsize 5+(SIZE*0.1)
  
  #ONLY FOR THE FIRST CYCLE REMOVE THE NODES(cycle 0)
  #minsize SIZE-(SIZE*CRASH)
   minsize 10
}



control.io it.polimi.peersim.observers.GeoObserver
{
	plot_protocol geolocation
	protocol link
	discovery_protocol discovery
	universe_protocol universe
	file_base graph
	include degree
}


control.congestion it.polimi.peersim.controls.ThresholdController
{
	universe_protocol universe
}

#control.wire it.polimi.peersim.controls.WirePrtag
#{
#wireprtag_protocol link
#discovery_protocol discovery
#}


order.control congestion crash io